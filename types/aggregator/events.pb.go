// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: halo/aggregator/v2/events.proto

package aggregator

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnswerUpdated struct {
	Current   cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=current,proto3,customtype=cosmossdk.io/math.Int" json:"current"`
	RoundId   uint64                `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	UpdatedAt uint32                `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *AnswerUpdated) Reset()         { *m = AnswerUpdated{} }
func (m *AnswerUpdated) String() string { return proto.CompactTextString(m) }
func (*AnswerUpdated) ProtoMessage()    {}
func (*AnswerUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d16d10149c1b217, []int{0}
}
func (m *AnswerUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnswerUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnswerUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnswerUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnswerUpdated.Merge(m, src)
}
func (m *AnswerUpdated) XXX_Size() int {
	return m.Size()
}
func (m *AnswerUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_AnswerUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_AnswerUpdated proto.InternalMessageInfo

func (m *AnswerUpdated) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *AnswerUpdated) GetUpdatedAt() uint32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type NextPriceReported struct {
	RoundId   uint64                `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	NextPrice cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=next_price,json=nextPrice,proto3,customtype=cosmossdk.io/math.Int" json:"next_price"`
}

func (m *NextPriceReported) Reset()         { *m = NextPriceReported{} }
func (m *NextPriceReported) String() string { return proto.CompactTextString(m) }
func (*NextPriceReported) ProtoMessage()    {}
func (*NextPriceReported) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d16d10149c1b217, []int{1}
}
func (m *NextPriceReported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextPriceReported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextPriceReported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextPriceReported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextPriceReported.Merge(m, src)
}
func (m *NextPriceReported) XXX_Size() int {
	return m.Size()
}
func (m *NextPriceReported) XXX_DiscardUnknown() {
	xxx_messageInfo_NextPriceReported.DiscardUnknown(m)
}

var xxx_messageInfo_NextPriceReported proto.InternalMessageInfo

func (m *NextPriceReported) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

type OwnershipTransferred struct {
	PreviousReporter string `protobuf:"bytes,1,opt,name=previous_reporter,json=previousReporter,proto3" json:"previous_reporter,omitempty"`
	NewReporter      string `protobuf:"bytes,2,opt,name=new_reporter,json=newReporter,proto3" json:"new_reporter,omitempty"`
}

func (m *OwnershipTransferred) Reset()         { *m = OwnershipTransferred{} }
func (m *OwnershipTransferred) String() string { return proto.CompactTextString(m) }
func (*OwnershipTransferred) ProtoMessage()    {}
func (*OwnershipTransferred) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d16d10149c1b217, []int{2}
}
func (m *OwnershipTransferred) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnershipTransferred) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnershipTransferred.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnershipTransferred) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnershipTransferred.Merge(m, src)
}
func (m *OwnershipTransferred) XXX_Size() int {
	return m.Size()
}
func (m *OwnershipTransferred) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnershipTransferred.DiscardUnknown(m)
}

var xxx_messageInfo_OwnershipTransferred proto.InternalMessageInfo

func (m *OwnershipTransferred) GetPreviousReporter() string {
	if m != nil {
		return m.PreviousReporter
	}
	return ""
}

func (m *OwnershipTransferred) GetNewReporter() string {
	if m != nil {
		return m.NewReporter
	}
	return ""
}

func init() {
	proto.RegisterType((*AnswerUpdated)(nil), "halo.aggregator.v2.AnswerUpdated")
	proto.RegisterType((*NextPriceReported)(nil), "halo.aggregator.v2.NextPriceReported")
	proto.RegisterType((*OwnershipTransferred)(nil), "halo.aggregator.v2.OwnershipTransferred")
}

func init() { proto.RegisterFile("halo/aggregator/v2/events.proto", fileDescriptor_2d16d10149c1b217) }

var fileDescriptor_2d16d10149c1b217 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x14, 0xf4, 0x02, 0xe2, 0xc8, 0xc2, 0x49, 0xc4, 0x3a, 0xa4, 0xdc, 0x49, 0x38, 0x21, 0x55, 0x04,
	0x3a, 0xef, 0x29, 0x7c, 0xc1, 0xa5, 0x4b, 0x0a, 0x82, 0x2c, 0x68, 0x68, 0xac, 0x8d, 0xfd, 0x62,
	0x5b, 0xc4, 0xbb, 0xd6, 0xdb, 0xb5, 0x1d, 0x2a, 0x7e, 0x81, 0x86, 0x7f, 0xa0, 0xa4, 0xe0, 0x23,
	0x52, 0x46, 0x54, 0x88, 0x22, 0x42, 0x49, 0xc1, 0x6f, 0x20, 0x7b, 0x6d, 0x25, 0xb4, 0xd7, 0x58,
	0x9e, 0x79, 0xb3, 0x33, 0xa3, 0xdd, 0x47, 0xfb, 0x31, 0x5f, 0x49, 0xc6, 0xa3, 0x08, 0x21, 0xe2,
	0x5a, 0x22, 0x2b, 0xc6, 0x0c, 0x0a, 0x10, 0x5a, 0xb9, 0x19, 0x4a, 0x2d, 0x6d, 0xbb, 0x12, 0xb8,
	0x47, 0x81, 0x5b, 0x8c, 0xaf, 0xba, 0x3c, 0x4d, 0x84, 0x64, 0xf5, 0xd7, 0xc8, 0xae, 0x2e, 0x03,
	0xa9, 0x52, 0xa9, 0xfc, 0x1a, 0x31, 0x03, 0x9a, 0xd1, 0x45, 0x24, 0x23, 0x69, 0xf8, 0xea, 0xcf,
	0xb0, 0xc3, 0xaf, 0x84, 0x9e, 0xdf, 0x0a, 0x55, 0x02, 0xbe, 0xcf, 0x42, 0xae, 0x21, 0xb4, 0x67,
	0xf4, 0x2c, 0xc8, 0x11, 0x41, 0xe8, 0x1e, 0x19, 0x90, 0x51, 0x67, 0x72, 0xb3, 0xd9, 0xf5, 0xad,
	0xdf, 0xbb, 0xfe, 0x33, 0x63, 0xa7, 0xc2, 0x8f, 0x6e, 0x22, 0x59, 0xca, 0x75, 0xec, 0x4e, 0x85,
	0xfe, 0xf9, 0xe3, 0x9a, 0x36, 0x39, 0x53, 0xa1, 0xbf, 0xfd, 0xfd, 0xfe, 0x92, 0x78, 0xad, 0x81,
	0x7d, 0x49, 0x1f, 0xa1, 0xcc, 0x45, 0xe8, 0x27, 0x61, 0xef, 0xde, 0x80, 0x8c, 0x1e, 0x78, 0x67,
	0x35, 0x9e, 0x86, 0xf6, 0x73, 0x4a, 0x73, 0x93, 0xe8, 0x73, 0xdd, 0xbb, 0x3f, 0x20, 0xa3, 0x73,
	0xaf, 0xd3, 0x30, 0xb7, 0x7a, 0xf8, 0x99, 0x76, 0xdf, 0xc0, 0x5a, 0xbf, 0xc5, 0x24, 0x00, 0x0f,
	0x32, 0x89, 0x55, 0xb5, 0x53, 0x3b, 0xf2, 0xbf, 0xdd, 0x9c, 0x52, 0x01, 0x6b, 0xed, 0x67, 0xd5,
	0x81, 0x3a, 0xeb, 0x2e, 0xc5, 0x3b, 0xa2, 0xcd, 0x1c, 0x2e, 0xe9, 0xc5, 0xbc, 0x14, 0x80, 0x2a,
	0x4e, 0xb2, 0x77, 0xc8, 0x85, 0x5a, 0x02, 0x22, 0x84, 0xf6, 0x2b, 0xda, 0xcd, 0x10, 0x8a, 0x44,
	0xe6, 0xca, 0x47, 0x53, 0x0c, 0xcd, 0x45, 0x79, 0x4f, 0xdb, 0x41, 0x53, 0x18, 0xed, 0x17, 0xf4,
	0x89, 0x80, 0xf2, 0xa8, 0xab, 0x7b, 0x79, 0x8f, 0x05, 0x94, 0xad, 0x64, 0x32, 0xdb, 0xec, 0x1d,
	0xb2, 0xdd, 0x3b, 0xe4, 0xcf, 0xde, 0x21, 0x5f, 0x0e, 0x8e, 0xb5, 0x3d, 0x38, 0xd6, 0xaf, 0x83,
	0x63, 0x7d, 0xb8, 0x89, 0x12, 0x1d, 0xe7, 0x0b, 0x37, 0x90, 0x29, 0x13, 0x72, 0xb1, 0x82, 0x6b,
	0xae, 0x14, 0x68, 0xc5, 0xea, 0x5d, 0x29, 0xc6, 0x4c, 0x7f, 0xca, 0x40, 0x9d, 0x2c, 0xcd, 0xe2,
	0x61, 0xfd, 0xa6, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xed, 0xaa, 0x4a, 0x7f, 0x4e, 0x02,
	0x00, 0x00,
}

func (m *AnswerUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnswerUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnswerUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.RoundId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Current.Size()
		i -= size
		if _, err := m.Current.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NextPriceReported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextPriceReported) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextPriceReported) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NextPrice.Size()
		i -= size
		if _, err := m.NextPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RoundId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OwnershipTransferred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnershipTransferred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnershipTransferred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewReporter) > 0 {
		i -= len(m.NewReporter)
		copy(dAtA[i:], m.NewReporter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewReporter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreviousReporter) > 0 {
		i -= len(m.PreviousReporter)
		copy(dAtA[i:], m.PreviousReporter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PreviousReporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnswerUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Current.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.RoundId != 0 {
		n += 1 + sovEvents(uint64(m.RoundId))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovEvents(uint64(m.UpdatedAt))
	}
	return n
}

func (m *NextPriceReported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovEvents(uint64(m.RoundId))
	}
	l = m.NextPrice.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *OwnershipTransferred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreviousReporter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewReporter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnswerUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnswerUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnswerUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextPriceReported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextPriceReported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextPriceReported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnershipTransferred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnershipTransferred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnershipTransferred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousReporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousReporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewReporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
