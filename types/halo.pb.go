// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: halo/v1/halo.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WithdrawSignatureWrapper struct {
	Data WithdrawSignatureData `protobuf:"bytes,1,opt,name=data,proto3" json:"halo_withdraw"`
}

func (m *WithdrawSignatureWrapper) Reset()         { *m = WithdrawSignatureWrapper{} }
func (m *WithdrawSignatureWrapper) String() string { return proto.CompactTextString(m) }
func (*WithdrawSignatureWrapper) ProtoMessage()    {}
func (*WithdrawSignatureWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf05a06102dd495f, []int{0}
}
func (m *WithdrawSignatureWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawSignatureWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawSignatureWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawSignatureWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawSignatureWrapper.Merge(m, src)
}
func (m *WithdrawSignatureWrapper) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawSignatureWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawSignatureWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawSignatureWrapper proto.InternalMessageInfo

func (m *WithdrawSignatureWrapper) GetData() WithdrawSignatureData {
	if m != nil {
		return m.Data
	}
	return WithdrawSignatureData{}
}

type WithdrawSignatureData struct {
	Recipient []byte                `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Nonce     uint64                `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *WithdrawSignatureData) Reset()         { *m = WithdrawSignatureData{} }
func (m *WithdrawSignatureData) String() string { return proto.CompactTextString(m) }
func (*WithdrawSignatureData) ProtoMessage()    {}
func (*WithdrawSignatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf05a06102dd495f, []int{1}
}
func (m *WithdrawSignatureData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawSignatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawSignatureData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawSignatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawSignatureData.Merge(m, src)
}
func (m *WithdrawSignatureData) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawSignatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawSignatureData.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawSignatureData proto.InternalMessageInfo

func (m *WithdrawSignatureData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *WithdrawSignatureData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*WithdrawSignatureWrapper)(nil), "halo.v1.WithdrawSignatureWrapper")
	proto.RegisterType((*WithdrawSignatureData)(nil), "halo.v1.WithdrawSignatureData")
}

func init() { proto.RegisterFile("halo/v1/halo.proto", fileDescriptor_cf05a06102dd495f) }

var fileDescriptor_cf05a06102dd495f = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x48, 0xcc, 0xc9,
	0xd7, 0x2f, 0x33, 0xd4, 0x07, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x60, 0x76,
	0x99, 0xa1, 0x94, 0x60, 0x62, 0x6e, 0x66, 0x5e, 0xbe, 0x3e, 0x98, 0x84, 0xc8, 0x49, 0x49, 0x26,
	0xe7, 0x17, 0xe7, 0xe6, 0x17, 0xc7, 0x83, 0x79, 0xfa, 0x10, 0x0e, 0x54, 0x4a, 0x24, 0x3d, 0x3f,
	0x3d, 0x1f, 0x22, 0x0e, 0x62, 0x41, 0x44, 0x95, 0x52, 0xb9, 0x24, 0xc2, 0x33, 0x4b, 0x32, 0x52,
	0x8a, 0x12, 0xcb, 0x83, 0x33, 0xd3, 0xf3, 0x12, 0x4b, 0x4a, 0x8b, 0x52, 0xc3, 0x8b, 0x12, 0x0b,
	0x0a, 0x52, 0x8b, 0x84, 0x3c, 0xb9, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35,
	0xb8, 0x8d, 0xe4, 0xf4, 0xa0, 0xf6, 0xea, 0x61, 0x68, 0x70, 0x49, 0x2c, 0x49, 0x74, 0x12, 0x3d,
	0x71, 0x4f, 0x9e, 0xe1, 0xd5, 0x3d, 0x79, 0x5e, 0x90, 0xb2, 0xf8, 0x72, 0xa8, 0x9a, 0x20, 0xb0,
	0x11, 0x4a, 0x53, 0x19, 0xb9, 0x44, 0xb1, 0x6a, 0x13, 0x92, 0xe1, 0xe2, 0x2c, 0x4a, 0x4d, 0xce,
	0x2c, 0xc8, 0x4c, 0xcd, 0x2b, 0x01, 0xdb, 0xc4, 0x13, 0x84, 0x10, 0x10, 0xf2, 0xe0, 0x62, 0x4b,
	0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x74, 0x32, 0x00, 0x59, 0x72,
	0xeb, 0x9e, 0xbc, 0x28, 0xc4, 0x6b, 0xc5, 0x29, 0xd9, 0x7a, 0x99, 0xf9, 0xfa, 0xb9, 0x89, 0x25,
	0x19, 0x7a, 0x9e, 0x79, 0x25, 0x97, 0xb6, 0xe8, 0x72, 0x41, 0xfd, 0xec, 0x99, 0x57, 0xb2, 0xe2,
	0xf9, 0x06, 0x2d, 0xc6, 0x20, 0xa8, 0x7e, 0x21, 0x11, 0x2e, 0xd6, 0xbc, 0xfc, 0xbc, 0xe4, 0x54,
	0x09, 0x66, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x08, 0xc7, 0xc9, 0xfe, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x54, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73,
	0xf5, 0xf3, 0xf2, 0x93, 0x72, 0x52, 0x75, 0x13, 0x8b, 0x8b, 0x53, 0x4b, 0x8a, 0xf5, 0x21, 0x31,
	0x62, 0xac, 0x5f, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x46, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x25, 0xa0, 0xb2, 0x9e, 0xa9, 0x01, 0x00, 0x00,
}

func (m *WithdrawSignatureWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawSignatureWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawSignatureWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHalo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WithdrawSignatureData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawSignatureData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawSignatureData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintHalo(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHalo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintHalo(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHalo(dAtA []byte, offset int, v uint64) int {
	offset -= sovHalo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WithdrawSignatureWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovHalo(uint64(l))
	return n
}

func (m *WithdrawSignatureData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovHalo(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovHalo(uint64(l))
	if m.Nonce != 0 {
		n += 1 + sovHalo(uint64(m.Nonce))
	}
	return n
}

func sovHalo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHalo(x uint64) (n int) {
	return sovHalo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WithdrawSignatureWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHalo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawSignatureWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawSignatureWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHalo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHalo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHalo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHalo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawSignatureData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHalo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawSignatureData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawSignatureData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHalo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHalo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHalo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHalo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHalo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHalo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHalo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHalo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHalo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHalo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHalo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHalo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHalo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHalo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHalo = fmt.Errorf("proto: unexpected end of group")
)
