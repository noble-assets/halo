syntax = "proto3";

package halo.entitlements.v1;

import "cosmos/query/v1/query.proto";
import "google/api/annotations.proto";
import "halo/entitlements/v1/entitlements.proto";

option go_package = "github.com/noble-assets/halo/v2/types/entitlements";

service Query {
  rpc Owner(QueryOwner) returns (QueryOwnerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/halo/entitlements/v1/owner";
  }

  rpc Paused(QueryPaused) returns (QueryPausedResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/halo/entitlements/v1/paused";
  }

  rpc PublicCapability(QueryPublicCapability) returns (QueryPublicCapabilityResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/halo/entitlements/v1/public_capability";
  }

  rpc RoleCapability(QueryRoleCapability) returns (QueryRoleCapabilityResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/halo/entitlements/v1/role_capability";
  }

  rpc UserCapability(QueryUserCapability) returns (QueryUserCapabilityResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/halo/entitlements/v1/user_capability/{address}";
  }
}

//

message QueryOwner {}

message QueryOwnerResponse {
  string owner = 1;
}

message QueryPaused {}

message QueryPausedResponse {
  bool paused = 1;
}

message QueryPublicCapability {
  string method = 1;
}

message QueryPublicCapabilityResponse {
  bool enabled = 1;
}

message QueryRoleCapability {
  string method = 1;
}

message QueryRoleCapabilityResponse {
  repeated Role roles = 1;
}

message QueryUserCapability {
  string address = 1;
}

message QueryUserCapabilityResponse {
  repeated Role roles = 1;
}
