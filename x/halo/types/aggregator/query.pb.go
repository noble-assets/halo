// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: halo/aggregator/v1/query.proto

package aggregator

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryOwner struct {
}

func (m *QueryOwner) Reset()         { *m = QueryOwner{} }
func (m *QueryOwner) String() string { return proto.CompactTextString(m) }
func (*QueryOwner) ProtoMessage()    {}
func (*QueryOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{0}
}
func (m *QueryOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwner.Merge(m, src)
}
func (m *QueryOwner) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwner.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwner proto.InternalMessageInfo

type QueryOwnerResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryOwnerResponse) Reset()         { *m = QueryOwnerResponse{} }
func (m *QueryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{1}
}
func (m *QueryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerResponse proto.InternalMessageInfo

func (m *QueryOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryNextPrice struct {
}

func (m *QueryNextPrice) Reset()         { *m = QueryNextPrice{} }
func (m *QueryNextPrice) String() string { return proto.CompactTextString(m) }
func (*QueryNextPrice) ProtoMessage()    {}
func (*QueryNextPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{2}
}
func (m *QueryNextPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextPrice.Merge(m, src)
}
func (m *QueryNextPrice) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextPrice.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextPrice proto.InternalMessageInfo

type QueryNextPriceResponse struct {
	NextPrice cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=next_price,json=nextPrice,proto3,customtype=cosmossdk.io/math.Int" json:"next_price"`
}

func (m *QueryNextPriceResponse) Reset()         { *m = QueryNextPriceResponse{} }
func (m *QueryNextPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextPriceResponse) ProtoMessage()    {}
func (*QueryNextPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{3}
}
func (m *QueryNextPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextPriceResponse.Merge(m, src)
}
func (m *QueryNextPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextPriceResponse proto.InternalMessageInfo

type QueryRoundData struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryRoundData) Reset()         { *m = QueryRoundData{} }
func (m *QueryRoundData) String() string { return proto.CompactTextString(m) }
func (*QueryRoundData) ProtoMessage()    {}
func (*QueryRoundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{4}
}
func (m *QueryRoundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundData.Merge(m, src)
}
func (m *QueryRoundData) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundData) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundData.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundData proto.InternalMessageInfo

func (m *QueryRoundData) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

type QueryLatestRoundData struct {
}

func (m *QueryLatestRoundData) Reset()         { *m = QueryLatestRoundData{} }
func (m *QueryLatestRoundData) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundData) ProtoMessage()    {}
func (*QueryLatestRoundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{5}
}
func (m *QueryLatestRoundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundData.Merge(m, src)
}
func (m *QueryLatestRoundData) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundData) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundData.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundData proto.InternalMessageInfo

type QueryRoundDataResponse struct {
	RoundId         uint64                `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Answer          cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=answer,proto3,customtype=cosmossdk.io/math.Int" json:"answer"`
	StartedAt       int64                 `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt       int64                 `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AnsweredInRound uint64                `protobuf:"varint,5,opt,name=answered_in_round,json=answeredInRound,proto3" json:"answered_in_round,omitempty"`
}

func (m *QueryRoundDataResponse) Reset()         { *m = QueryRoundDataResponse{} }
func (m *QueryRoundDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRoundDataResponse) ProtoMessage()    {}
func (*QueryRoundDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{6}
}
func (m *QueryRoundDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundDataResponse.Merge(m, src)
}
func (m *QueryRoundDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundDataResponse proto.InternalMessageInfo

func (m *QueryRoundDataResponse) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *QueryRoundDataResponse) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *QueryRoundDataResponse) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *QueryRoundDataResponse) GetAnsweredInRound() uint64 {
	if m != nil {
		return m.AnsweredInRound
	}
	return 0
}

type QueryRoundDetails struct {
	RoundId uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *QueryRoundDetails) Reset()         { *m = QueryRoundDetails{} }
func (m *QueryRoundDetails) String() string { return proto.CompactTextString(m) }
func (*QueryRoundDetails) ProtoMessage()    {}
func (*QueryRoundDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{7}
}
func (m *QueryRoundDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundDetails.Merge(m, src)
}
func (m *QueryRoundDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundDetails proto.InternalMessageInfo

func (m *QueryRoundDetails) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

type QueryLatestRoundDetails struct {
}

func (m *QueryLatestRoundDetails) Reset()         { *m = QueryLatestRoundDetails{} }
func (m *QueryLatestRoundDetails) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundDetails) ProtoMessage()    {}
func (*QueryLatestRoundDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{8}
}
func (m *QueryLatestRoundDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundDetails.Merge(m, src)
}
func (m *QueryLatestRoundDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundDetails proto.InternalMessageInfo

type QueryRoundDetailsResponse struct {
	RoundId     uint64                `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Balance     cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=balance,proto3,customtype=cosmossdk.io/math.Int" json:"balance"`
	Interest    cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=interest,proto3,customtype=cosmossdk.io/math.Int" json:"interest"`
	TotalSupply cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_supply,json=totalSupply,proto3,customtype=cosmossdk.io/math.Int" json:"total_supply"`
	UpdatedAt   int64                 `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *QueryRoundDetailsResponse) Reset()         { *m = QueryRoundDetailsResponse{} }
func (m *QueryRoundDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRoundDetailsResponse) ProtoMessage()    {}
func (*QueryRoundDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97f98e48b118c150, []int{9}
}
func (m *QueryRoundDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundDetailsResponse.Merge(m, src)
}
func (m *QueryRoundDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundDetailsResponse proto.InternalMessageInfo

func (m *QueryRoundDetailsResponse) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *QueryRoundDetailsResponse) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryOwner)(nil), "halo.aggregator.v1.QueryOwner")
	proto.RegisterType((*QueryOwnerResponse)(nil), "halo.aggregator.v1.QueryOwnerResponse")
	proto.RegisterType((*QueryNextPrice)(nil), "halo.aggregator.v1.QueryNextPrice")
	proto.RegisterType((*QueryNextPriceResponse)(nil), "halo.aggregator.v1.QueryNextPriceResponse")
	proto.RegisterType((*QueryRoundData)(nil), "halo.aggregator.v1.QueryRoundData")
	proto.RegisterType((*QueryLatestRoundData)(nil), "halo.aggregator.v1.QueryLatestRoundData")
	proto.RegisterType((*QueryRoundDataResponse)(nil), "halo.aggregator.v1.QueryRoundDataResponse")
	proto.RegisterType((*QueryRoundDetails)(nil), "halo.aggregator.v1.QueryRoundDetails")
	proto.RegisterType((*QueryLatestRoundDetails)(nil), "halo.aggregator.v1.QueryLatestRoundDetails")
	proto.RegisterType((*QueryRoundDetailsResponse)(nil), "halo.aggregator.v1.QueryRoundDetailsResponse")
}

func init() { proto.RegisterFile("halo/aggregator/v1/query.proto", fileDescriptor_97f98e48b118c150) }

var fileDescriptor_97f98e48b118c150 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xbb, 0x40, 0x81, 0x3e, 0x89, 0xc8, 0x04, 0xb1, 0x2d, 0xba, 0xe0, 0x1a, 0x09, 0xb6,
	0xb2, 0x2b, 0x6a, 0x4c, 0x3c, 0x42, 0x3c, 0x58, 0x43, 0x40, 0xcb, 0xcd, 0x4b, 0x33, 0xed, 0x4e,
	0x96, 0x8d, 0xdb, 0x99, 0x75, 0x67, 0xca, 0x8f, 0x18, 0x2f, 0x9e, 0x38, 0x9a, 0xe0, 0x5d, 0x8f,
	0x1e, 0x3d, 0xf8, 0x27, 0x78, 0xe0, 0x48, 0xf4, 0x62, 0x3c, 0x10, 0x03, 0x26, 0xfc, 0x15, 0x26,
	0x66, 0x67, 0xb6, 0xbb, 0xd0, 0xd2, 0x16, 0x7b, 0x69, 0xfb, 0x7e, 0x7d, 0xdf, 0x67, 0xde, 0xee,
	0x9b, 0x82, 0xbe, 0x81, 0x3d, 0x66, 0x61, 0xc7, 0x09, 0x88, 0x83, 0x05, 0x0b, 0xac, 0xcd, 0x45,
	0xeb, 0x75, 0x83, 0x04, 0x3b, 0xa6, 0x1f, 0x30, 0xc1, 0x10, 0x0a, 0xe3, 0x66, 0x12, 0x37, 0x37,
	0x17, 0xf3, 0x13, 0xb8, 0xee, 0x52, 0x66, 0xc9, 0x4f, 0x95, 0x96, 0x9f, 0xae, 0x31, 0x5e, 0x67,
	0x5c, 0x95, 0xb6, 0x68, 0xe4, 0x73, 0x2a, 0x58, 0x91, 0x96, 0xa5, 0x8c, 0x28, 0x34, 0xe9, 0x30,
	0x87, 0x29, 0x7f, 0xf8, 0x2b, 0xf2, 0x5e, 0x77, 0x18, 0x73, 0x3c, 0x62, 0x61, 0xdf, 0xb5, 0x30,
	0xa5, 0x4c, 0x60, 0xe1, 0x32, 0x1a, 0xd5, 0x18, 0x63, 0x00, 0x2f, 0x42, 0xf5, 0xb5, 0x2d, 0x4a,
	0x02, 0xa3, 0x00, 0x28, 0xb1, 0xca, 0x84, 0xfb, 0x8c, 0x72, 0x82, 0x26, 0x21, 0xcd, 0x42, 0x47,
	0x56, 0x9b, 0xd5, 0xe6, 0x33, 0x65, 0x65, 0x18, 0x57, 0xe0, 0xb2, 0xcc, 0x5d, 0x25, 0xdb, 0xe2,
	0x79, 0xe0, 0xd6, 0x88, 0xe1, 0xc2, 0xd4, 0x59, 0x4f, 0xac, 0xb0, 0x06, 0x40, 0xc9, 0xb6, 0xa8,
	0xf8, 0xa1, 0x57, 0xc9, 0x2c, 0xdf, 0xdb, 0x3f, 0x9c, 0x49, 0xfd, 0x3a, 0x9c, 0xb9, 0xaa, 0xce,
	0xc0, 0xed, 0x57, 0xa6, 0xcb, 0xac, 0x3a, 0x16, 0x1b, 0x66, 0x89, 0x8a, 0xef, 0x5f, 0x17, 0x20,
	0x3a, 0x5c, 0x89, 0x8a, 0xcf, 0x27, 0x5f, 0x0a, 0x5a, 0x39, 0x43, 0xe3, 0x56, 0xc5, 0xa8, 0x79,
	0x99, 0x35, 0xa8, 0xfd, 0x04, 0x0b, 0x8c, 0x72, 0x30, 0x1a, 0x84, 0x46, 0xc5, 0xb5, 0x65, 0x83,
	0xa1, 0xf2, 0x88, 0xb4, 0x4b, 0xb6, 0x31, 0x05, 0x93, 0x32, 0x79, 0x05, 0x0b, 0xc2, 0x45, 0x5c,
	0x62, 0x9c, 0x68, 0x11, 0x70, 0xec, 0x8a, 0x81, 0x3b, 0xab, 0xa1, 0xa7, 0x30, 0x8c, 0x29, 0xdf,
	0x22, 0x41, 0x76, 0xa0, 0xcf, 0x73, 0x44, 0xf5, 0xe8, 0x06, 0x00, 0x17, 0x38, 0x10, 0xc4, 0xae,
	0x60, 0x91, 0x1d, 0x9c, 0xd5, 0xe6, 0x07, 0xcb, 0x99, 0xc8, 0xb3, 0x24, 0xc2, 0x70, 0xc3, 0xb7,
	0x71, 0x14, 0x1e, 0x52, 0xe1, 0xc8, 0xb3, 0x24, 0x50, 0x01, 0x26, 0x94, 0x0e, 0xb1, 0x2b, 0x2e,
	0xad, 0x48, 0xbc, 0x6c, 0x5a, 0xb2, 0x8e, 0x37, 0x03, 0x25, 0x2a, 0x8f, 0x66, 0x98, 0x30, 0x71,
	0xea, 0xa0, 0x44, 0x60, 0xd7, 0xe3, 0xdd, 0x26, 0x96, 0x83, 0x6b, 0x6d, 0x13, 0x53, 0x55, 0xc6,
	0xb7, 0x01, 0xc8, 0xb5, 0x69, 0x5d, 0x64, 0x6e, 0xcf, 0x60, 0xa4, 0x8a, 0x3d, 0x4c, 0x6b, 0xa4,
	0xef, 0xc1, 0x35, 0x05, 0xd0, 0x0a, 0x8c, 0xba, 0x54, 0x90, 0x80, 0x70, 0x35, 0xb7, 0x7e, 0xc4,
	0x62, 0x05, 0xb4, 0x0e, 0x63, 0x82, 0x09, 0xec, 0x55, 0x78, 0xc3, 0xf7, 0xbd, 0x1d, 0x39, 0xea,
	0x7e, 0x14, 0x2f, 0x49, 0x95, 0x75, 0x29, 0xd2, 0xf2, 0xf4, 0xd2, 0x2d, 0x4f, 0xef, 0xfe, 0xdf,
	0x61, 0x48, 0xcb, 0x31, 0xa2, 0x2d, 0x48, 0xcb, 0x75, 0x43, 0xba, 0xd9, 0x7e, 0x3d, 0x98, 0xc9,
	0x3a, 0xe6, 0xe7, 0xba, 0xc7, 0x9b, 0xcf, 0xc0, 0x98, 0xdb, 0x0d, 0x69, 0xde, 0xfd, 0xf8, 0xb3,
	0x37, 0x30, 0x8d, 0x72, 0xd6, 0x39, 0x77, 0x92, 0x5c, 0x60, 0xb4, 0xab, 0x41, 0x26, 0x5e, 0x55,
	0x64, 0x74, 0x54, 0x8f, 0x73, 0xf2, 0x85, 0xde, 0x39, 0x31, 0x45, 0x31, 0xa1, 0x98, 0x45, 0xfa,
	0x79, 0x14, 0xc9, 0x8d, 0x80, 0xf6, 0x34, 0xc8, 0x24, 0xab, 0xdc, 0x19, 0x25, 0xce, 0xe9, 0x82,
	0xd2, 0xb6, 0xcc, 0xc6, 0xa3, 0x04, 0xa5, 0x88, 0xee, 0x9c, 0x87, 0xa2, 0xde, 0x59, 0x1b, 0x0b,
	0x6c, 0xbd, 0x69, 0xbe, 0xbf, 0x6f, 0xd1, 0x07, 0x0d, 0xc6, 0x5b, 0xee, 0x0c, 0x34, 0xdf, 0xb1,
	0x6f, 0x4b, 0xe6, 0x7f, 0x11, 0xf6, 0x1e, 0x56, 0x42, 0x88, 0x3e, 0x6a, 0x30, 0x76, 0x66, 0x91,
	0x6f, 0xf7, 0xe8, 0xa4, 0xd2, 0xf2, 0x0b, 0x17, 0x4a, 0x8b, 0x99, 0x1e, 0x27, 0x4c, 0x26, 0xba,
	0xdb, 0x85, 0x49, 0xd5, 0x9d, 0x1e, 0xdc, 0x27, 0x0d, 0x50, 0xfb, 0xd5, 0x81, 0x8a, 0x17, 0x9a,
	0x5d, 0x7f, 0xb4, 0x66, 0x42, 0x7b, 0x0b, 0xdd, 0xec, 0x49, 0xbb, 0xbc, 0xba, 0x7f, 0xa4, 0x6b,
	0x07, 0x47, 0xba, 0xf6, 0xfb, 0x48, 0xd7, 0xde, 0x1f, 0xeb, 0xa9, 0x83, 0x63, 0x3d, 0xf5, 0xf3,
	0x58, 0x4f, 0xbd, 0x7c, 0xe8, 0xb8, 0x62, 0xa3, 0x51, 0x35, 0x6b, 0xac, 0x6e, 0x51, 0x56, 0xf5,
	0xc8, 0x02, 0xe6, 0x9c, 0x08, 0xae, 0x34, 0xb7, 0xd5, 0x97, 0xd8, 0xf1, 0x09, 0x3f, 0xd5, 0xa0,
	0x3a, 0x2c, 0xff, 0x4e, 0x1f, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x10, 0x1e, 0x12, 0x03,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error)
	NextPrice(ctx context.Context, in *QueryNextPrice, opts ...grpc.CallOption) (*QueryNextPriceResponse, error)
	RoundData(ctx context.Context, in *QueryRoundData, opts ...grpc.CallOption) (*QueryRoundDataResponse, error)
	LatestRoundData(ctx context.Context, in *QueryLatestRoundData, opts ...grpc.CallOption) (*QueryRoundDataResponse, error)
	RoundDetails(ctx context.Context, in *QueryRoundDetails, opts ...grpc.CallOption) (*QueryRoundDetailsResponse, error)
	LatestRoundDetails(ctx context.Context, in *QueryLatestRoundDetails, opts ...grpc.CallOption) (*QueryRoundDetailsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error) {
	out := new(QueryOwnerResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextPrice(ctx context.Context, in *QueryNextPrice, opts ...grpc.CallOption) (*QueryNextPriceResponse, error) {
	out := new(QueryNextPriceResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/NextPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RoundData(ctx context.Context, in *QueryRoundData, opts ...grpc.CallOption) (*QueryRoundDataResponse, error) {
	out := new(QueryRoundDataResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/RoundData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestRoundData(ctx context.Context, in *QueryLatestRoundData, opts ...grpc.CallOption) (*QueryRoundDataResponse, error) {
	out := new(QueryRoundDataResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/LatestRoundData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RoundDetails(ctx context.Context, in *QueryRoundDetails, opts ...grpc.CallOption) (*QueryRoundDetailsResponse, error) {
	out := new(QueryRoundDetailsResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/RoundDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestRoundDetails(ctx context.Context, in *QueryLatestRoundDetails, opts ...grpc.CallOption) (*QueryRoundDetailsResponse, error) {
	out := new(QueryRoundDetailsResponse)
	err := c.cc.Invoke(ctx, "/halo.aggregator.v1.Query/LatestRoundDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Owner(context.Context, *QueryOwner) (*QueryOwnerResponse, error)
	NextPrice(context.Context, *QueryNextPrice) (*QueryNextPriceResponse, error)
	RoundData(context.Context, *QueryRoundData) (*QueryRoundDataResponse, error)
	LatestRoundData(context.Context, *QueryLatestRoundData) (*QueryRoundDataResponse, error)
	RoundDetails(context.Context, *QueryRoundDetails) (*QueryRoundDetailsResponse, error)
	LatestRoundDetails(context.Context, *QueryLatestRoundDetails) (*QueryRoundDetailsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryOwner) (*QueryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) NextPrice(ctx context.Context, req *QueryNextPrice) (*QueryNextPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextPrice not implemented")
}
func (*UnimplementedQueryServer) RoundData(ctx context.Context, req *QueryRoundData) (*QueryRoundDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundData not implemented")
}
func (*UnimplementedQueryServer) LatestRoundData(ctx context.Context, req *QueryLatestRoundData) (*QueryRoundDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestRoundData not implemented")
}
func (*UnimplementedQueryServer) RoundDetails(ctx context.Context, req *QueryRoundDetails) (*QueryRoundDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundDetails not implemented")
}
func (*UnimplementedQueryServer) LatestRoundDetails(ctx context.Context, req *QueryLatestRoundDetails) (*QueryRoundDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestRoundDetails not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/NextPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextPrice(ctx, req.(*QueryNextPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RoundData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoundData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RoundData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/RoundData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RoundData(ctx, req.(*QueryRoundData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestRoundData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestRoundData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestRoundData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/LatestRoundData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestRoundData(ctx, req.(*QueryLatestRoundData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RoundDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoundDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RoundDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/RoundDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RoundDetails(ctx, req.(*QueryRoundDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestRoundDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestRoundDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestRoundDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halo.aggregator.v1.Query/LatestRoundDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestRoundDetails(ctx, req.(*QueryLatestRoundDetails))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "halo.aggregator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "NextPrice",
			Handler:    _Query_NextPrice_Handler,
		},
		{
			MethodName: "RoundData",
			Handler:    _Query_RoundData_Handler,
		},
		{
			MethodName: "LatestRoundData",
			Handler:    _Query_LatestRoundData_Handler,
		},
		{
			MethodName: "RoundDetails",
			Handler:    _Query_RoundDetails_Handler,
		},
		{
			MethodName: "LatestRoundDetails",
			Handler:    _Query_LatestRoundDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "halo/aggregator/v1/query.proto",
}

func (m *QueryOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NextPrice.Size()
		i -= size
		if _, err := m.NextPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRoundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRoundDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnsweredInRound != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AnsweredInRound))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.StartedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartedAt))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Answer.Size()
		i -= size
		if _, err := m.Answer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoundDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRoundDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Interest.Size()
		i -= size
		if _, err := m.Interest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NextPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRoundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryLatestRoundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRoundDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	l = m.Answer.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.StartedAt != 0 {
		n += 1 + sovQuery(uint64(m.StartedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedAt))
	}
	if m.AnsweredInRound != 0 {
		n += 1 + sovQuery(uint64(m.AnsweredInRound))
	}
	return n
}

func (m *QueryRoundDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	return n
}

func (m *QueryLatestRoundDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRoundDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	l = m.Balance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Interest.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.UpdatedAt != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedAt))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Answer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnsweredInRound", wireType)
			}
			m.AnsweredInRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnsweredInRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
