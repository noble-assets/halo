// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: halo/entitlements/v1/tx.proto

package entitlementsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_SetPublicCapability_FullMethodName = "/halo.entitlements.v1.Msg/SetPublicCapability"
	Msg_SetRoleCapability_FullMethodName   = "/halo.entitlements.v1.Msg/SetRoleCapability"
	Msg_SetUserRole_FullMethodName         = "/halo.entitlements.v1.Msg/SetUserRole"
	Msg_Pause_FullMethodName               = "/halo.entitlements.v1.Msg/Pause"
	Msg_Unpause_FullMethodName             = "/halo.entitlements.v1.Msg/Unpause"
	Msg_TransferOwnership_FullMethodName   = "/halo.entitlements.v1.Msg/TransferOwnership"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	SetPublicCapability(ctx context.Context, in *MsgSetPublicCapability, opts ...grpc.CallOption) (*MsgSetPublicCapabilityResponse, error)
	SetRoleCapability(ctx context.Context, in *MsgSetRoleCapability, opts ...grpc.CallOption) (*MsgSetRoleCapabilityResponse, error)
	SetUserRole(ctx context.Context, in *MsgSetUserRole, opts ...grpc.CallOption) (*MsgSetUserRoleResponse, error)
	Pause(ctx context.Context, in *MsgPause, opts ...grpc.CallOption) (*MsgPauseResponse, error)
	Unpause(ctx context.Context, in *MsgUnpause, opts ...grpc.CallOption) (*MsgUnpauseResponse, error)
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetPublicCapability(ctx context.Context, in *MsgSetPublicCapability, opts ...grpc.CallOption) (*MsgSetPublicCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetPublicCapabilityResponse)
	err := c.cc.Invoke(ctx, Msg_SetPublicCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetRoleCapability(ctx context.Context, in *MsgSetRoleCapability, opts ...grpc.CallOption) (*MsgSetRoleCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetRoleCapabilityResponse)
	err := c.cc.Invoke(ctx, Msg_SetRoleCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetUserRole(ctx context.Context, in *MsgSetUserRole, opts ...grpc.CallOption) (*MsgSetUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetUserRoleResponse)
	err := c.cc.Invoke(ctx, Msg_SetUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Pause(ctx context.Context, in *MsgPause, opts ...grpc.CallOption) (*MsgPauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgPauseResponse)
	err := c.cc.Invoke(ctx, Msg_Pause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Unpause(ctx context.Context, in *MsgUnpause, opts ...grpc.CallOption) (*MsgUnpauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnpauseResponse)
	err := c.cc.Invoke(ctx, Msg_Unpause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, Msg_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
type MsgServer interface {
	SetPublicCapability(context.Context, *MsgSetPublicCapability) (*MsgSetPublicCapabilityResponse, error)
	SetRoleCapability(context.Context, *MsgSetRoleCapability) (*MsgSetRoleCapabilityResponse, error)
	SetUserRole(context.Context, *MsgSetUserRole) (*MsgSetUserRoleResponse, error)
	Pause(context.Context, *MsgPause) (*MsgPauseResponse, error)
	Unpause(context.Context, *MsgUnpause) (*MsgUnpauseResponse, error)
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) SetPublicCapability(context.Context, *MsgSetPublicCapability) (*MsgSetPublicCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicCapability not implemented")
}
func (UnimplementedMsgServer) SetRoleCapability(context.Context, *MsgSetRoleCapability) (*MsgSetRoleCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleCapability not implemented")
}
func (UnimplementedMsgServer) SetUserRole(context.Context, *MsgSetUserRole) (*MsgSetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRole not implemented")
}
func (UnimplementedMsgServer) Pause(context.Context, *MsgPause) (*MsgPauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMsgServer) Unpause(context.Context, *MsgUnpause) (*MsgUnpauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpause not implemented")
}
func (UnimplementedMsgServer) TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SetPublicCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPublicCapability)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPublicCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetPublicCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPublicCapability(ctx, req.(*MsgSetPublicCapability))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetRoleCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRoleCapability)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRoleCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetRoleCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRoleCapability(ctx, req.(*MsgSetRoleCapability))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetUserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetUserRole(ctx, req.(*MsgSetUserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPause)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Pause(ctx, req.(*MsgPause))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Unpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpause)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Unpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Unpause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Unpause(ctx, req.(*MsgUnpause))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "halo.entitlements.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPublicCapability",
			Handler:    _Msg_SetPublicCapability_Handler,
		},
		{
			MethodName: "SetRoleCapability",
			Handler:    _Msg_SetRoleCapability_Handler,
		},
		{
			MethodName: "SetUserRole",
			Handler:    _Msg_SetUserRole_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Msg_Pause_Handler,
		},
		{
			MethodName: "Unpause",
			Handler:    _Msg_Unpause_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "halo/entitlements/v1/tx.proto",
}
